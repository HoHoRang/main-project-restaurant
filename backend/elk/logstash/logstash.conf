input {
  jdbc {
    ##### 1단계 ##### => 매번 똑같은 데이터를 계속 가지고 옴
    # jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
    # jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
    # jdbc_connection_string => "jdbc:mysql://my-database:3306/myclass02"
    # jdbc_user => "root"
    # jdbc_password => "root"
    # schedule => "* * * * *"
    # statement => "select * from products"

    ##### 2단계 #####
    # jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
    # jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
    # jdbc_connection_string => "jdbc:mysql://my-database:3306/myclass02"
    # jdbc_user => "root"
    # jdbc_password => "root"
    # schedule => "* * * * *"
    # use_column_value => true
    # tracking_column => "updatedat"
    # tracking_column_type => "timestamp"
    # last_run_metadata_path => "./aaa.txt"
    # statement => "select id, name, price, updatedat from products where updatedat > :sql_last_value order by updatedat"

    ##### 3단계 #####
    jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
    jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
    jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker02"
    jdbc_user => "root"
    jdbc_password => "root"
    schedule => "* * * * *"
    use_column_value => true
    tracking_column => "updatedat"
    tracking_column_type => "numeric"
    last_run_metadata_path => "./aaa.txt"
    statement => "select id, title, contents, likecount, dislikecount, hitcount, boardid, storeid, foodtypeid, userid, unix_timestamp(updatedat) as updatedat from post where unix_timestamp(updatedat) > :sql_last_value order by updatedat"
    # statement => "select p.id, p.title, p.contents, p.likecount, p.dislikecount, p.hitcount, unix_timestamp(p.updatedat) as updatedat, p.createdat, p.deletedat
    #                   , p.boardid, b.boardname, b.createdAt as boardcreatedat, b.deletedAt as boarddeletedat
    #                   , p.storeid, s.storename, s.address, s.latitude, s.longitude, s.category, s.createdat as storecreatedat, s.deletedat as storedeletedat, s.ownerid
    #                   , p.foodtypeid, f.typename as foodtypename, f.deletedat as fooddeletedat
    #                   , p.userid, u.name as username, u.email as useremail, u.phone as userphone, u.loginid as userloginid, u.rrn as userrrn, u.nickname as usernickname, u.provider as userprovider
    #                   , u.createdat as usercreatedat, u.updatedat as userupdatedat, u.deletedat as userdeletedat, u.usergradeid
    #               from post p
    #                 , board b
    #                 , store s
    #                 , food_type f
    #                 , `user` u
    #               where 1 = 1
    #               and   unix_timestamp(p.updatedat) > :sql_last_value
    #               and   p.boardId = b.id
    #               and   p.storeId = s.id
    #               and   p.foodTypeId = f.id
    #               and   p.userId = u.id
    #               order by p.updatedat"
  }
}

output {
  elasticsearch {
    hosts => "elasticsearch:9200"
    index => "mypost"
    template => "/usr/share/logstash/post_template.json"
  }
}